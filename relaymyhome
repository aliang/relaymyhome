#!/usr/bin/env bash

# The MIT License (MIT)
#
# Copyright (c) 2015 Alvin Liang
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# RelayMyHome 2.0
# Original script by Rob Zimmerman (https://www.github.com/taintedzodiac)
# Original script located at https://github.com/taintedzodiac/relaymyhome
# This fork by Alvin Liang (https://github.com/aliang)
# See other generous contributors, plus view the source, readme, and license at https://github.com/aliang/relaymyhome
# Tested in OS X 10.9 (Mavericks)

# How long we will pause on each MAC address (seconds)
relay_time=90
# How long to wait between Wi-Fi configuration steps (seconds)
sleep_time=1
# Number of tries to set the MAC address before giving up
# (1 second between tries)
wait_tries=30

wservice=`/usr/sbin/networksetup -listallnetworkservices | grep -Ei '(wi-fi|airport)'`
# Wi-Fi interface name, used in all sorts of commands
wifi=$(networksetup -listallhardwareports | awk "/$wservice/,/Ethernet/"' getline { print $2 }')
# Original hardware MAC address, uppercase
WirelessMAC=$(networksetup -getmacaddress "${wifi}" | awk '{print $3}' | tr '[:lower:]' '[:upper:]')
# Variable to store the current spoofed MAC address.
# Used to poll for whether the MAC was set successfully
currentMAC=$WirelessMAC

echo "Wi-Fi adapter is: $wifi"
echo "Original MAC address is: $WirelessMAC"

function notify {
    if [ -z ${speak} ] ; then
        echo "${@}" ;
    else
        say --interactive=green "${@}" ;
    fi
    return 0
}

# Pauses for X seconds
function pause_with_progress_dots {
    local pause_time
    pause_time=$1
    local pause_count
    pause_count=1
    while [ $pause_count -le $pause_time ]; do
        printf "."
        sleep 1
        pause_count=$((pause_count+1))
    done
    printf "\n"
}

function disassociate_from_wifi_network {
    printf "Disassociating from Wi-Fi network"
    disassociate_from_wifi_network_silently
    pause_with_progress_dots $sleep_time
}

function disassociate_from_wifi_network_silently {
    sudo /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -z
}

function turn_off_wifi {
    printf "Turning off Wi-Fi" # for ${sleep_time} seconds"
    sudo networksetup -setairportpower $wifi off
    pause_with_progress_dots $sleep_time
}

function turn_on_wifi {
    printf "Turning on Wi-Fi"
    sudo networksetup -setairportpower $wifi on
    pause_with_progress_dots $sleep_time
}

# Cycle Wi-Fi
function cycle_wifi {
    turn_off_wifi
    turn_on_wifi
    echo "WiFi cycle completed"
}

function unload_internet_sharing {
    if $(sudo launchctl list | grep -q com.apple.InternetSharing.plist); then
        printf "Unloading Internet Sharing plist"
        sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.InternetSharing.plist
        pause_with_progress_dots $sleep_time
    else
        echo "Internet Sharing plist not loaded"
    fi
}

# Turn off Internet Sharing if on
function turn_off_internet_sharing {
    sudo killall InternetSharing
}

function turn_on_internet_sharing {
    sudo /usr/libexec/InternetSharing &
}

function set_mac_address {
    local targetMAC
    targetMAC=$1
    sudo ifconfig $wifi ether $targetMAC
}

# Stores the current mac address to $currentMAC as uppercase.
function store_current_mac_address {
    currentMAC=$(ifconfig ${wifi} ether | grep ether | awk '{print $2}' | tr '[:lower:]' '[:upper:]')
}

# Sets the mac address. Stores the resulting mac address to $currentMAC.
# Assumes the wifi is on
function set_and_store_current_mac_address {
    local targetMAC
    targetMAC=$1
    disassociate_from_wifi_network_silently
    set_mac_address $targetMAC
    store_current_mac_address
}

function dump_ifconfig {
    echo "Here is the output of ifconfig $wifi:"
    echo `ifconfig $wifi`
    echo "--------"
}

# Sets the mac address repeatedly until it sticks
# Stores the resulting mac address to $currentMAC
function set_and_wait_for_mac_address_change {
    echo "Setting and waiting for MAC address to change"
    local targetMAC
    targetMAC=$1
    local wait_count
    wait_count=1
    while [ $targetMAC != $currentMAC ] && [ $wait_count -le $wait_tries ]; do
        printf "\rAttempt $wait_count of $wait_tries ($currentMAC -> $targetMAC)"
        sleep 1
        set_and_store_current_mac_address $targetMAC
        wait_count=$((wait_count+1))
    done
    printf "\n"
    if [ $targetMAC != $currentMAC ]; then
        echo "MAC addresses didn't match"
    fi
    echo "MAC address is now $currentMAC"
}

function spoof_mac_address {
    local targetMAC
    targetMAC=$1
    # echo "Setting address to $targetMAC"

    # Turn on wifi
    turn_on_wifi
    disassociate_from_wifi_network
    unload_internet_sharing
    turn_off_internet_sharing
    set_and_wait_for_mac_address_change $targetMAC
    cycle_wifi
    turn_on_internet_sharing
}

function reset_mac_address {
    spoof_mac_address $WirelessMAC
}

function cleanup {
    reset_mac_address
    turn_off_internet_sharing

    echo "Cycling of Relays has completed, MAC address reverted."
    notify "Time to check your street passes!"
    return 0
}

function ctrl_c {
    # user quit midway through, so we should revert
    # the MAC address by calling our cleanup function
    echo "*** Interrupted, cleaning up ***"
    cleanup
    exit $?
}

function usage {
    echo "$0 [-c count] [-s]" 
    echo "c: the number of MAC addresses to cycle through."
    echo "s: audibly speak when the script is done"
}

# trap keyboard interrupt (control-c) or unexpected quit
trap ctrl_c SIGINT SIGTERM

while getopts hsc: option
do
    case "${option}" in
        h) usage ; exit ;;
        s) speak=1 ;;
        c) count=${OPTARG} ;;
        *) usage ; exit 1 ;
    esac
done

shift $((OPTIND - 1))

### TODO:
### * change this to a case statement
### * Make most of this into functions
### * Parse other cli options for verbosity and say vs silent
### * Put the list of MACs into a sqlite3 db and query only oldest visited ones?

if  [[ $1 == "full" || $1 == "fuller" || $1 == "quick" ]]
then
    # Generate a full list of 160 MACs when "full" mode is specified
    # To use full mode: ./relaymyhome full
    # Check the repo at github for more information.

    # Set the base MAC address
    baseAddr="4E:53:50:4F:4F:"

    # Create an array for the last octet of the mac address, limited range.
    Addr=($(for X in {0..159} ; do echo ${X} | awk '{printf "%s%02X ", "4E:53:50:4F:4F:", $1}'; done ;))

    if [[ $1 == "full" ]]
    then
      num=5
      echo "Full Mode enabled. Randomly seeding five addresses from full list."
    else
      num=2
      echo "Quick Mode enabled. Randomly seeding ${num} addresses from full list."
    fi

    # TODO: Back up existing Internet Sharing plist (this would allow us to set the SSID)
    # TODO: Copy settings in place of existing Internet Sharing plist

    for ((a=1; a<=$num; a++));
    do
        selectedAddr=${Addr[$RANDOM % ${#Addr[@]} ]}
        echo "-----------------------------------------------"
        echo "Spoofing $wifi to $selectedAddr ($a of $num)"
        echo "-----------------------------------------------"
        spoof_mac_address $selectedAddr
        # Wait for connections
        echo "Pausing to allow connections for ${relay_time} seconds"
        pause_with_progress_dots $relay_time
    done
elif [[ $1 == "cleanup" ]]; then
    echo "Not doing anything, only cleaning up"
else
    # This set of MACs will be used in standard mode
    # Taken from: https://docs.google.com/spreadsheet/ccc?key=0AvvH5W4E2lIwdEFCUkxrM085ZGp0UkZlenp6SkJablE#gid=0
    # TODO: Read this from a file
    # Usage: ./relaymyhome
    addr[0]='00:0D:67:15:2D:82'
    addr[1]='00:0D:67:15:D7:21'
    addr[2]='00:0D:67:15:D5:44'
    addr[3]='00:0D:67:15:D2:59'
    addr[4]='00:0D:67:15:D6:FD'
    addr[5]='4E:53:50:4F:4F:40'
    addr[6]='4E:53:50:4F:4F:41'
    addr[7]='4E:53:50:4F:4F:42'
    addr[8]='4E:53:50:4F:4F:43'
    addr[9]='4E:53:50:4F:4F:44'
    addr[10]='4E:53:50:4F:4F:45'
    addr[11]='4E:53:50:4F:4F:46'
    addr[12]='4E:53:50:4F:4F:47'
    addr[13]='4E:53:50:4F:4F:48'
    addr[14]='4E:53:50:4F:4F:49'
    addr[15]='4E:53:50:4F:4F:4A'
    addr[16]='4E:53:50:4F:4F:4B'
    addr[17]='4E:53:50:4F:4F:4C'
    addr[18]='4E:53:50:4F:4F:4D'
    addr[19]='4E:53:50:4F:4F:4E'
    addr[20]='4E:53:50:4F:4F:4F'

    echo "Standard Mode enabled. Connecting to the five Nintendo World relays and the sixteen Homepass relays."
    n=1

    for a in "${addr[@]}"
    do
        echo "-----------------------------------------------"
        echo "Spoofing $wifi to $a ($n of ${#addr[@]})"
        echo "-----------------------------------------------"
        spoof_mac_address $a
        # Wait for connections
        echo "Pausing to allow connections for ${relay_time} seconds"
        pause_with_progress_dots $relay_time
        n=$((n+1))
    done
fi

# ... and we are done

cleanup
